<?php
namespace Firebase\JWT; use ArrayAccess; use DomainException; use Exception; use InvalidArgumentException; use OpenSSLAsymmetricKey; use UnexpectedValueException; use DateTime; class JWT { const ASN1_INTEGER = 2; const ASN1_SEQUENCE = 16; const ASN1_BIT_STRING = 3; public static $leeway = 0; public static $timestamp = null; public static $supported_algs = array('ES384' => array('openssl', 'SHA384'), 'ES256' => array('openssl', 'SHA256'), 'HS256' => array('hash_hmac', 'SHA256'), 'HS384' => array('hash_hmac', 'SHA384'), 'HS512' => array('hash_hmac', 'SHA512'), 'RS256' => array('openssl', 'SHA256'), 'RS384' => array('openssl', 'SHA384'), 'RS512' => array('openssl', 'SHA512'), 'EdDSA' => array('sodium_crypto', 'EdDSA')); public static function decode($sp707a4f, $sp95f7c6, array $spfc03d3 = array()) { $sp6acd62 = \is_null(static::$timestamp) ? \time() : static::$timestamp; if (empty($sp95f7c6)) { throw new InvalidArgumentException('Key may not be empty'); } $sp001bf4 = \explode('.', $sp707a4f); if (\count($sp001bf4) != 3) { throw new UnexpectedValueException('Wrong number of segments'); } list($spd256bf, $spab6a1e, $sp0d66b1) = $sp001bf4; if (null === ($sp38fcd1 = static::jsonDecode(static::urlsafeB64Decode($spd256bf)))) { throw new UnexpectedValueException('Invalid header encoding'); } if (null === ($sp2b4234 = static::jsonDecode(static::urlsafeB64Decode($spab6a1e)))) { throw new UnexpectedValueException('Invalid claims encoding'); } if (false === ($sp742c1c = static::urlsafeB64Decode($sp0d66b1))) { throw new UnexpectedValueException('Invalid signature encoding'); } if (empty($sp38fcd1->alg)) { throw new UnexpectedValueException('Empty algorithm'); } if (empty(static::$supported_algs[$sp38fcd1->alg])) { throw new UnexpectedValueException('Algorithm not supported'); } list($spbf22e0, $sp49626c) = self::sp005a08($sp95f7c6, empty($sp38fcd1->kid) ? null : $sp38fcd1->kid); if (empty($sp49626c)) { if (!\in_array($sp38fcd1->alg, $spfc03d3)) { throw new UnexpectedValueException('Algorithm not allowed'); } } else { if (!self::constantTimeEquals($sp49626c, $sp38fcd1->alg)) { throw new UnexpectedValueException('Incorrect key for this algorithm'); } } if ($sp38fcd1->alg === 'ES256' || $sp38fcd1->alg === 'ES384') { $sp742c1c = self::sp3b0254($sp742c1c); } if (!static::sp4dd17d("{$spd256bf}.{$spab6a1e}", $sp742c1c, $spbf22e0, $sp38fcd1->alg)) { throw new SignatureInvalidException('Signature verification failed'); } if (isset($sp2b4234->nbf) && $sp2b4234->nbf > $sp6acd62 + static::$leeway) { throw new BeforeValidException('Cannot handle token prior to ' . \date(DateTime::ISO8601, $sp2b4234->nbf)); } if (isset($sp2b4234->iat) && $sp2b4234->iat > $sp6acd62 + static::$leeway) { throw new BeforeValidException('Cannot handle token prior to ' . \date(DateTime::ISO8601, $sp2b4234->iat)); } if (isset($sp2b4234->exp) && $sp6acd62 - static::$leeway >= $sp2b4234->exp) { throw new ExpiredException('Expired token'); } return $sp2b4234; } public static function encode($sp2b4234, $spb637ea, $sp397a1e = 'HS256', $spded393 = null, $sp230100 = null) { $sp38fcd1 = array('typ' => 'JWT', 'alg' => $sp397a1e); if ($spded393 !== null) { $sp38fcd1['kid'] = $spded393; } if (isset($sp230100) && \is_array($sp230100)) { $sp38fcd1 = \array_merge($sp230100, $sp38fcd1); } $sp8c2cdf = array(); $sp8c2cdf[] = static::urlsafeB64Encode(static::jsonEncode($sp38fcd1)); $sp8c2cdf[] = static::urlsafeB64Encode(static::jsonEncode($sp2b4234)); $spbe2658 = \implode('.', $sp8c2cdf); $spd39ddb = static::sign($spbe2658, $spb637ea, $sp397a1e); $sp8c2cdf[] = static::urlsafeB64Encode($spd39ddb); return \implode('.', $sp8c2cdf); } public static function sign($spec3101, $spb637ea, $sp397a1e = 'HS256') { if (empty(static::$supported_algs[$sp397a1e])) { throw new DomainException('Algorithm not supported'); } list($sp51742e, $sp49626c) = static::$supported_algs[$sp397a1e]; switch ($sp51742e) { case 'hash_hmac': return \hash_hmac($sp49626c, $spec3101, $spb637ea, true); case 'openssl': $spd39ddb = ''; $sp87381e = \openssl_sign($spec3101, $spd39ddb, $spb637ea, $sp49626c); if (!$sp87381e) { throw new DomainException('OpenSSL unable to sign data'); } if ($sp397a1e === 'ES256') { $spd39ddb = self::sp638e52($spd39ddb, 256); } elseif ($sp397a1e === 'ES384') { $spd39ddb = self::sp638e52($spd39ddb, 384); } return $spd39ddb; case 'sodium_crypto': if (!function_exists('sodium_crypto_sign_detached')) { throw new DomainException('libsodium is not available'); } try { $sp050b7c = array_filter(explode('
', $spb637ea)); $spb637ea = base64_decode(end($sp050b7c)); return sodium_crypto_sign_detached($spec3101, $spb637ea); } catch (Exception $sp8756ec) { throw new DomainException($sp8756ec->getMessage(), 0, $sp8756ec); } } } private static function sp4dd17d($spec3101, $spd39ddb, $spb637ea, $sp397a1e) { if (empty(static::$supported_algs[$sp397a1e])) { throw new DomainException('Algorithm not supported'); } list($sp51742e, $sp49626c) = static::$supported_algs[$sp397a1e]; switch ($sp51742e) { case 'openssl': $sp87381e = \openssl_verify($spec3101, $spd39ddb, $spb637ea, $sp49626c); if ($sp87381e === 1) { return true; } elseif ($sp87381e === 0) { return false; } throw new DomainException('OpenSSL error: ' . \openssl_error_string()); case 'sodium_crypto': if (!function_exists('sodium_crypto_sign_verify_detached')) { throw new DomainException('libsodium is not available'); } try { $sp050b7c = array_filter(explode('
', $spb637ea)); $spb637ea = base64_decode(end($sp050b7c)); return sodium_crypto_sign_verify_detached($spd39ddb, $spec3101, $spb637ea); } catch (Exception $sp8756ec) { throw new DomainException($sp8756ec->getMessage(), 0, $sp8756ec); } case 'hash_hmac': default: $sp6c5e5a = \hash_hmac($sp49626c, $spec3101, $spb637ea, true); return self::constantTimeEquals($spd39ddb, $sp6c5e5a); } } public static function jsonDecode($sp32cc1b) { if (\version_compare(PHP_VERSION, '5.4.0', '>=') && !(\defined('JSON_C_VERSION') && PHP_INT_SIZE > 4)) { $sp605559 = \json_decode($sp32cc1b, false, 512, JSON_BIGINT_AS_STRING); } else { $sp745da0 = \strlen((string) PHP_INT_MAX) - 1; $sp2e07dd = \preg_replace('/:\\s*(-?\\d{' . $sp745da0 . ',})/', ': "$1"', $sp32cc1b); $sp605559 = \json_decode($sp2e07dd); } if ($sp28062c = \json_last_error()) { static::spec1506($sp28062c); } elseif ($sp605559 === null && $sp32cc1b !== 'null') { throw new DomainException('Null result with non-null input'); } return $sp605559; } public static function jsonEncode($sp32cc1b) { $spb2470f = \json_encode($sp32cc1b); if ($sp28062c = \json_last_error()) { static::spec1506($sp28062c); } elseif ($spb2470f === 'null' && $sp32cc1b !== null) { throw new DomainException('Null result with non-null input'); } return $spb2470f; } public static function urlsafeB64Decode($sp32cc1b) { $sp9c83ca = \strlen($sp32cc1b) % 4; if ($sp9c83ca) { $sp39200e = 4 - $sp9c83ca; $sp32cc1b .= \str_repeat('=', $sp39200e); } return \base64_decode(\strtr($sp32cc1b, '-_', '+/')); } public static function urlsafeB64Encode($sp32cc1b) { return \str_replace('=', '', \strtr(\base64_encode($sp32cc1b), '+/', '-_')); } private static function sp005a08($sp95f7c6, $sp314316 = null) { if (is_string($sp95f7c6) || is_resource($sp95f7c6) || $sp95f7c6 instanceof OpenSSLAsymmetricKey) { return array($sp95f7c6, null); } if ($sp95f7c6 instanceof Key) { return array($sp95f7c6->getKeyMaterial(), $sp95f7c6->getAlgorithm()); } if (is_array($sp95f7c6) || $sp95f7c6 instanceof ArrayAccess) { if (!isset($sp314316)) { throw new UnexpectedValueException('"kid" empty, unable to lookup correct key'); } if (!isset($sp95f7c6[$sp314316])) { throw new UnexpectedValueException('"kid" invalid, unable to lookup correct key'); } $spb637ea = $sp95f7c6[$sp314316]; if ($spb637ea instanceof Key) { return array($spb637ea->getKeyMaterial(), $spb637ea->getAlgorithm()); } return array($spb637ea, null); } throw new UnexpectedValueException('$keyOrKeyArray must be a string|resource key, an array of string|resource keys, ' . 'an instance of Firebase\\JWT\\Key key or an array of Firebase\\JWT\\Key keys'); } public static function constantTimeEquals($sp746853, $spbc7733) { if (\function_exists('hash_equals')) { return \hash_equals($sp746853, $spbc7733); } $sp0578e1 = \min(static::sp4d7fce($sp746853), static::sp4d7fce($spbc7733)); $sp1feba3 = 0; for ($sp4847b2 = 0; $sp4847b2 < $sp0578e1; $sp4847b2++) { $sp1feba3 |= \ord($sp746853[$sp4847b2]) ^ \ord($spbc7733[$sp4847b2]); } $sp1feba3 |= static::sp4d7fce($sp746853) ^ static::sp4d7fce($spbc7733); return $sp1feba3 === 0; } private static function spec1506($sp28062c) { $spba86f2 = array(JSON_ERROR_DEPTH => 'Maximum stack depth exceeded', JSON_ERROR_STATE_MISMATCH => 'Invalid or malformed JSON', JSON_ERROR_CTRL_CHAR => 'Unexpected control character found', JSON_ERROR_SYNTAX => 'Syntax error, malformed JSON', JSON_ERROR_UTF8 => 'Malformed UTF-8 characters'); throw new DomainException(isset($spba86f2[$sp28062c]) ? $spba86f2[$sp28062c] : 'Unknown JSON error: ' . $sp28062c); } private static function sp4d7fce($spf8f440) { if (\function_exists('mb_strlen')) { return \mb_strlen($spf8f440, '8bit'); } return \strlen($spf8f440); } private static function sp3b0254($sp742c1c) { list($sp7c60af, $sp8a8b37) = \str_split($sp742c1c, (int) (\strlen($sp742c1c) / 2)); $sp7c60af = \ltrim($sp7c60af, ' '); $sp8a8b37 = \ltrim($sp8a8b37, ' '); if (\ord($sp7c60af[0]) > 127) { $sp7c60af = ' ' . $sp7c60af; } if (\ord($sp8a8b37[0]) > 127) { $sp8a8b37 = ' ' . $sp8a8b37; } return self::sp3383d0(self::ASN1_SEQUENCE, self::sp3383d0(self::ASN1_INTEGER, $sp7c60af) . self::sp3383d0(self::ASN1_INTEGER, $sp8a8b37)); } private static function sp3383d0($sp5d76a7, $sp08694a) { $sp8df037 = 0; if ($sp5d76a7 === self::ASN1_SEQUENCE) { $sp8df037 |= 32; } $spbad3d1 = \chr($sp8df037 | $sp5d76a7); $spbad3d1 .= \chr(\strlen($sp08694a)); return $spbad3d1 . $sp08694a; } private static function sp638e52($spbad3d1, $sp1d664a) { list($spc0cd3e, $spd23b41) = self::sp3fc542($spbad3d1); list($spc0cd3e, $sp7c60af) = self::sp3fc542($spbad3d1, $spc0cd3e); list($spc0cd3e, $sp8a8b37) = self::sp3fc542($spbad3d1, $spc0cd3e); $sp7c60af = \ltrim($sp7c60af, ' '); $sp8a8b37 = \ltrim($sp8a8b37, ' '); $sp7c60af = \str_pad($sp7c60af, $sp1d664a / 8, ' ', STR_PAD_LEFT); $sp8a8b37 = \str_pad($sp8a8b37, $sp1d664a / 8, ' ', STR_PAD_LEFT); return $sp7c60af . $sp8a8b37; } private static function sp3fc542($spbad3d1, $spc0cd3e = 0) { $sp9f25a2 = $spc0cd3e; $sp11ec9d = \strlen($spbad3d1); $spe8070c = \ord($spbad3d1[$sp9f25a2]) >> 5 & 1; $sp5d76a7 = \ord($spbad3d1[$sp9f25a2++]) & 31; $sp0578e1 = \ord($spbad3d1[$sp9f25a2++]); if ($sp0578e1 & 128) { $sp660761 = $sp0578e1 & 31; $sp0578e1 = 0; while ($sp660761-- && $sp9f25a2 < $sp11ec9d) { $sp0578e1 = $sp0578e1 << 8 | \ord($spbad3d1[$sp9f25a2++]); } } if ($sp5d76a7 == self::ASN1_BIT_STRING) { $sp9f25a2++; $spee103d = \substr($spbad3d1, $sp9f25a2, $sp0578e1 - 1); $sp9f25a2 += $sp0578e1 - 1; } elseif (!$spe8070c) { $spee103d = \substr($spbad3d1, $sp9f25a2, $sp0578e1); $sp9f25a2 += $sp0578e1; } else { $spee103d = null; } return array($sp9f25a2, $spee103d); } }