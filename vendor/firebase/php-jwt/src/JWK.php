<?php
namespace Firebase\JWT; use DomainException; use InvalidArgumentException; use UnexpectedValueException; class JWK { public static function parseKeySet(array $spb84c9e) { $sp07f79d = array(); if (!isset($spb84c9e['keys'])) { throw new UnexpectedValueException('"keys" member must exist in the JWK Set'); } if (empty($spb84c9e['keys'])) { throw new InvalidArgumentException('JWK Set did not contain any keys'); } foreach ($spb84c9e['keys'] as $spe4924e => $spf73a95) { $sp314316 = isset($spf73a95['kid']) ? $spf73a95['kid'] : $spe4924e; if ($spb637ea = self::parseKey($spf73a95)) { $sp07f79d[$sp314316] = $spb637ea; } } if (0 === \count($sp07f79d)) { throw new UnexpectedValueException('No supported algorithms found in JWK Set'); } return $sp07f79d; } public static function parseKey(array $spe5b6ff) { if (empty($spe5b6ff)) { throw new InvalidArgumentException('JWK must not be empty'); } if (!isset($spe5b6ff['kty'])) { throw new UnexpectedValueException('JWK must contain a "kty" parameter'); } switch ($spe5b6ff['kty']) { case 'RSA': if (!empty($spe5b6ff['d'])) { throw new UnexpectedValueException('RSA private keys are not supported'); } if (!isset($spe5b6ff['n']) || !isset($spe5b6ff['e'])) { throw new UnexpectedValueException('RSA keys must contain values for both "n" and "e"'); } $sp0f6fe8 = self::sp720ade($spe5b6ff['n'], $spe5b6ff['e']); $sp8f51a9 = \openssl_pkey_get_public($sp0f6fe8); if (false === $sp8f51a9) { throw new DomainException('OpenSSL error: ' . \openssl_error_string()); } return $sp8f51a9; default: break; } } private static function sp720ade($sp660761, $sp8756ec) { $spa5b905 = JWT::urlsafeB64Decode($sp660761); $spa425d7 = JWT::urlsafeB64Decode($sp8756ec); $spcf295e = array('modulus' => \pack('Ca*a*', 2, self::spd25f54(\strlen($spa5b905)), $spa5b905), 'publicExponent' => \pack('Ca*a*', 2, self::spd25f54(\strlen($spa425d7)), $spa425d7)); $sp06f917 = \pack('Ca*a*a*', 48, self::spd25f54(\strlen($spcf295e['modulus']) + \strlen($spcf295e['publicExponent'])), $spcf295e['modulus'], $spcf295e['publicExponent']); $sp28eb76 = \pack('H*', '300d06092a864886f70d0101010500'); $sp06f917 = \chr(0) . $sp06f917; $sp06f917 = \chr(3) . self::spd25f54(\strlen($sp06f917)) . $sp06f917; $sp06f917 = \pack('Ca*a*', 48, self::spd25f54(\strlen($sp28eb76 . $sp06f917)), $sp28eb76 . $sp06f917); $sp06f917 = '-----BEGIN PUBLIC KEY-----
' . \chunk_split(\base64_encode($sp06f917), 64) . '-----END PUBLIC KEY-----'; return $sp06f917; } private static function spd25f54($sp50b1ae) { if ($sp50b1ae <= 127) { return \chr($sp50b1ae); } $sp900b49 = \ltrim(\pack('N', $sp50b1ae), \chr(0)); return \pack('Ca*', 128 | \strlen($sp900b49), $sp900b49); } }